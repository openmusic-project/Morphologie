; OM File Header - Saved 2009/06/15 12:44:33
; (6.0011 :patc (om-make-point 99 105) (om-make-point 50 50) (om-make-point 963 584) "No documentation " 183 0 nil "2009/06/15 12:44:33")
; End File Header
(in-package :om)(load-lib-for (quote ("morphologie")))(setf *om-current-persistent* (om-load-patch1 "Classification ex2" (quote ((om-load-editor-box1 "BPC" (quote bpc) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "X-POINTS" (list 0 10)) (om-load-inputfun (quote input-funbox) "no documentation" "Y-POINTS" (list 0 100)) (om-load-inputfun (quote input-funbox) "no documentation" "DECIMALS" 0))) (om-make-point 497 155) (om-make-point 139 88) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (76 99 27 77 85 65 50 35 53 90 7 73 71 13 40 42 33 22 100 57 123 132 123 116 110 118 115 126 121 132 131 117 127 117 117 124 120 133 137 118 123 136 123 123 127 131 136 115 129 123 114 134 133 133 123 139 135 119 129 139 115 130 114 122 120 118 115 119 139 139 124 120 116 135 111 140 138 133 131 135 110 130 110 134 113 134 133 114 128 118 140 121 137 131 132 122 140 130 133 132 122 115 131 133 121 134 119 137 110 114 133 119 128 131 130 115 134 111 138 114 181 199 184 189 187 194 188 186 199 185 197 185 194 185 182 189 197 191 191 193 181 195 182 187 191 181 199 190 185 198 197 192 188 190 181 191 182 192 192 187 196 192 180 199 190 181 189 187 191 199 197 191 196 190 198 193 180 183 193 180 181 196 190 188 194 184 189 184 196 183 187 198 198 194 188 180 198 193 189 186 196 194 185 187 184 185 195 193 184 189 183 200 189 185 188 182 193 195 191 190)) (quote (62 2 74 26 63 6 19 32 20 91 2 39 67 80 36 48 73 16 100 51 124 136 128 128 135 129 136 117 135 140 124 113 131 117 118 122 117 140 119 112 111 136 111 114 110 110 127 123 123 116 130 113 140 121 126 111 123 128 112 124 112 123 119 130 123 124 127 135 125 132 126 117 120 135 133 126 124 119 129 113 130 114 132 120 135 115 122 126 118 121 128 120 127 123 123 130 126 137 114 136 114 111 130 132 126 132 126 133 134 119 140 132 117 122 117 136 120 127 139 138 181 194 190 186 182 197 181 184 180 191 192 184 196 187 184 192 192 192 180 198 184 181 199 199 199 194 189 187 193 185 194 199 192 200 180 184 198 183 184 183 191 185 193 196 185 184 181 187 185 183 200 187 182 197 185 193 180 188 189 187 185 189 194 196 183 192 189 192 190 186 189 186 182 200 180 197 189 195 195 181 194 189 191 181 183 192 188 185 192 192 200 192 192 193 190 183 199 190 184 198)) (quote bpc) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) nil nil (pairlis (quote (show-stems obj-mode palette-mode winpos winsize mode grillestep notechancolor? cmnpref zoom inport outport deltapict)) (list (quote t) 0 0 2621450 18350450 0 1000 nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 1 0 0 (om-make-point 0 0))) t nil nil nil) (om-load-boxcomment "comment" (om-make-point 113 50) (quote "<- Does n iterations of class-1") "" (om-make-point 679 278) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 97 72) (quote "(e-shannon works also with list of lists)") "" (om-make-point 568 487) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 143 60) (quote "It is the one closer to the input data.") "" (om-make-point 700 478) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment1" (om-make-point 182 63) (quote "2) Use e-test to find-out the classification corresponding to minimum entropy:") "" (om-make-point 703 421) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 89 58) (quote "1) One run has a minimum entropy value.") "" (om-make-point 574 426) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "E-TEST" (quote morph::e-test) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "CLUSTERS" nil) (om-load-inputfunmenu1 (quote input-funmenu) "no documentation" "TEST" "min" (list (list "min" "min") (list "max" "max"))) (om-load-inputfunmenu1 (quote input-funmenu) "no documentation" "OUT" "clust" (list (list "clust" "clust") (list "nth" "nth"))))) (om-make-point 700 363) nil nil nil nil 1) (om-load-boxcall (quote genfun) "E-SHANNON11111" (quote morph::e-shannon) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "CLASS" nil) (om-load-inputfunmenu1 (quote input-funmenu) "no documentation" "RES" "rel" (list (list "absolute" "abs") (list "relative" "rel"))))) (om-make-point 622 363) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 193 29) (quote "Non homogeneous clusters") "" (om-make-point 429 24) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 239 29) (quote "E_SHANNON - EXEMPLE 2 -") "" (om-make-point 435 0) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 374 47) (quote "Sometimes, the algorithm doesn't stabilizes itself (Warning message).$Try several runs with meta-class1.") "" (om-make-point 130 492) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux5" (quote t) (quote nil) (om-make-point 686 248) (om-make-point 26 28) 10 "10" nil) (om-load-boxcall (quote bastype) "aux4" (quote t) (quote nil) (om-make-point 640 248) (om-make-point 20 28) 3 "3" nil) (om-load-boxcall (quote genfun) "META-CLASS1" (quote morph::meta-class1) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "MATRIX" nil) (om-load-inputfun (quote input-funbox) "no documentation" "N" 2) (om-load-inputfun (quote input-funbox) "no documentation" "ITER" 10))) (om-make-point 600 280) nil (list (list (list 0 1 1 0 2 0 2 0 2 1 1 2 0 1 1 0 2 2 1 1 0 1 0 2 1 1 1 2 1 1 0 2 2 0 1 2 1 1 2 2 0 0 2 0 0 0 2 2 0 0 0 1 0 1 1 0 1 2 2 0 2 0 1 1 0 1 0 0 2 2 1 2 0 1 2 1 0 2 1 2 1 2 1 1 0 1 0 0 2 1 0 1 2 2 2 0 1 1 2 0 1 2 2 0 1 2 1 0 1 0 1 1 2 2 0 1 1 1 0 1 1 2 1 0 2 1 1 2 0 1 2 0 1 2 0 2 2 1 0 1 2 1 2 0 1 0 0 2 2 1 2 0 1 2 0 0 0 2 1 1 1 2 2 1 0 0 2 2 1 0 0 0 0 1 0 2 0 0 1 0 2 2 2 0 2 0 0 0 2 0 0 2 2 1 0 0 1 0 2 0 1 0 1 0 0 2 1 1 0 0 0 0 1 1 0 0 2 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2) (list 0 1 0 0 0 1 2 2 0 2 1 1 1 0 0 0 1 2 1 1 0 1 1 2 1 0 1 2 1 0 0 1 1 1 0 1 0 1 0 2 0 2 1 0 2 2 1 2 2 0 2 2 0 2 2 0 0 2 1 1 0 2 1 1 0 0 1 2 0 2 1 1 1 0 2 2 1 0 0 1 1 2 2 2 1 0 0 1 1 2 0 1 1 2 1 1 0 1 1 0 1 2 1 2 2 2 1 1 1 0 0 0 2 2 2 1 0 0 2 2 0 1 1 1 2 2 1 0 0 0 0 0 0 1 0 1 2 1 2 1 2 1 2 0 1 0 2 0 0 2 1 1 1 2 1 2 2 0 0 2 0 2 2 0 2 0 1 2 0 0 1 1 0 2 1 0 0 1 2 2 2 2 1 0 0 0 2 2 2 2 1 0 1 2 1 0 2 1 1 1 0 2 1 0 2 2 1 2 2 0 1 2 0 0 2 1 0 0 0 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (list 0 0 0 1 1 2 0 0 0 2 0 2 1 1 0 0 1 0 1 1 1 1 0 0 2 0 1 2 0 2 2 1 2 0 0 1 0 1 2 0 0 1 0 1 2 2 0 1 0 2 0 2 0 1 0 1 1 1 2 2 0 1 0 1 2 1 2 1 2 0 2 1 2 2 0 2 0 1 0 0 0 2 0 0 0 1 1 0 0 2 1 2 2 1 2 2 1 0 2 0 0 2 1 0 2 2 0 0 2 0 0 0 1 1 0 0 0 2 1 0 1 0 0 0 0 0 1 0 2 0 0 2 1 2 2 1 2 0 2 2 1 0 1 1 2 1 2 0 0 2 1 1 1 0 0 2 2 2 1 1 0 1 1 2 1 2 2 0 0 2 1 2 1 1 2 1 0 2 0 2 1 2 2 0 0 0 2 2 1 2 2 1 1 0 1 0 0 1 1 2 0 0 1 0 0 0 2 2 2 0 0 2 2 0 2 0 2 0 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (list 0 1 2 1 1 2 2 1 0 2 2 0 2 0 0 2 0 1 0 2 0 2 0 0 1 0 1 1 1 2 2 1 2 2 0 2 0 2 0 0 0 2 0 1 1 1 2 2 1 2 0 0 1 1 0 2 2 2 1 1 0 1 0 0 2 1 2 1 1 0 0 1 2 1 2 1 2 0 2 1 1 2 0 0 2 1 0 2 2 2 2 0 2 0 2 0 0 0 0 1 0 2 0 0 2 2 2 2 2 2 1 2 0 0 2 0 2 0 2 0 0 2 0 1 2 2 0 2 0 2 1 0 2 2 2 1 0 2 1 2 0 2 1 1 0 0 0 1 0 2 0 0 1 2 0 1 0 1 2 1 0 2 1 2 1 2 2 0 2 0 1 1 1 2 2 0 0 0 1 1 1 0 2 0 2 2 2 1 1 2 1 0 1 1 1 1 1 0 1 2 0 0 2 2 0 0 2 1 1 1 1 1 2 2 2 1 0 0 0 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (list 0 0 0 1 0 0 2 0 2 1 2 1 0 1 1 2 1 1 0 0 0 0 1 1 1 2 2 2 2 0 1 2 2 1 1 0 1 0 0 1 2 2 1 2 1 2 2 2 1 0 1 1 0 1 1 1 1 0 1 0 2 1 0 1 2 1 1 0 1 1 1 0 1 2 1 1 2 1 1 1 0 2 1 0 0 1 2 1 0 1 0 2 0 1 0 2 0 2 2 1 1 1 1 1 1 2 1 2 0 1 1 2 1 1 1 2 2 2 1 1 1 1 1 1 2 1 2 0 2 1 2 0 1 0 1 0 0 2 2 0 1 1 0 1 1 2 0 0 1 1 2 2 1 1 1 0 2 1 0 1 1 0 1 2 0 1 2 0 2 2 0 0 2 2 1 0 1 1 1 2 1 1 1 2 0 1 2 2 0 2 1 0 1 2 2 2 2 0 0 1 2 2 1 0 2 1 1 1 0 1 2 0 0 1 0 1 2 2 0 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (list 0 1 2 1 0 0 2 2 2 0 1 2 2 2 1 1 2 1 2 2 0 2 2 2 0 0 1 2 2 1 0 0 0 1 1 1 0 0 0 1 1 2 1 1 0 0 2 0 0 0 1 2 0 0 0 1 0 2 1 2 2 0 1 1 1 0 1 2 0 0 0 2 1 1 0 1 2 1 1 0 0 1 0 1 1 0 2 2 2 2 2 1 0 0 1 1 0 1 1 1 1 0 0 0 2 1 0 2 1 1 0 2 1 0 2 1 0 2 0 1 1 2 2 0 2 2 2 2 0 0 0 1 2 0 0 2 1 1 1 2 0 1 0 1 1 2 2 0 0 0 1 0 2 1 1 0 0 2 0 0 1 2 2 2 1 0 1 2 0 2 0 0 2 2 1 1 0 0 0 0 1 0 0 2 2 1 1 0 0 2 0 2 0 2 0 2 2 2 1 0 2 2 2 2 2 1 0 0 1 0 2 1 1 2 2 0 2 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (list 0 1 2 2 0 0 1 0 0 0 2 0 0 0 2 2 1 2 0 2 1 1 0 0 1 0 2 1 0 1 1 0 1 0 1 0 1 0 2 1 1 0 2 1 2 0 0 1 0 0 1 0 1 0 1 2 1 2 0 2 2 2 0 0 1 1 0 1 0 1 0 1 0 1 2 1 0 1 1 2 1 0 2 0 0 2 1 0 2 0 0 2 2 2 1 1 1 0 0 1 0 0 1 0 1 2 2 0 0 1 1 1 0 2 0 0 2 1 2 0 0 0 2 0 1 0 2 0 1 1 2 2 2 1 1 2 2 0 1 1 2 2 2 1 1 2 0 2 0 2 1 2 1 2 2 2 0 1 0 1 1 2 1 0 2 2 1 1 1 2 0 0 1 1 2 2 2 0 2 2 2 2 2 1 2 1 2 0 1 2 1 0 1 0 1 2 0 2 1 1 0 1 1 0 0 1 2 1 0 0 0 2 2 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (list 0 0 1 1 1 1 1 1 0 2 0 1 0 0 1 0 2 1 1 1 2 2 2 0 1 1 0 2 0 2 0 2 1 0 1 2 1 1 0 2 1 2 1 0 1 1 2 2 1 2 0 2 1 1 1 2 0 0 0 1 1 2 0 1 1 0 2 0 1 1 2 2 0 1 0 0 2 0 1 0 1 2 1 2 2 2 2 0 0 2 2 2 2 2 0 0 0 0 0 0 0 2 2 0 1 0 2 1 1 1 1 1 2 2 1 2 2 0 1 1 1 1 0 1 2 0 2 1 2 0 0 0 2 1 0 2 1 1 2 0 1 2 2 2 2 1 1 0 1 0 0 2 1 1 2 1 0 0 0 1 1 1 2 0 0 2 1 0 1 2 1 0 1 0 1 2 1 1 0 0 0 0 1 2 2 2 1 1 0 2 1 2 0 2 1 1 1 0 0 0 2 1 1 1 0 1 2 1 0 2 2 2 0 2 2 0 0 0 0 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (list 0 1 2 1 1 0 0 0 0 0 0 2 2 0 1 0 0 2 1 1 0 2 2 0 1 0 1 0 0 2 1 0 1 1 1 2 2 1 1 2 0 0 1 0 2 1 0 0 2 2 0 1 0 1 2 2 1 2 2 2 0 1 2 0 2 0 0 2 1 2 0 2 1 1 2 0 0 2 2 1 2 1 2 1 0 0 0 2 2 0 2 1 0 2 1 1 0 2 1 2 0 2 1 2 1 1 1 1 2 2 2 1 1 1 1 2 0 2 1 1 0 2 0 1 1 2 0 0 1 2 2 2 2 0 0 2 2 2 1 2 1 2 2 0 1 1 1 2 0 0 2 2 1 2 1 0 1 1 2 1 0 1 0 1 1 1 2 1 0 0 1 2 1 2 0 0 0 2 0 1 2 2 2 0 2 1 2 0 0 1 1 1 0 2 1 2 2 0 2 2 2 2 1 0 1 0 1 1 1 0 2 2 1 0 2 2 1 2 0 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (list 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2))) "x" nil 1) (om-load-boxcall (quote lispfun) "SECOND" (quote second) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 577 111) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 511 111) nil nil nil nil 1) (om-load-boxcall (quote genfun) "MAT-TRANS" (quote mat-trans) (quote ((om-load-inputfun (quote input-funbox) "the list" "MATRIX" nil))) (om-make-point 225 159) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 140 60) (om-make-point 32 28) 100 "100" nil) (om-load-boxcomment "comment" (om-make-point 262 57) (quote "in relative mode,$this classification with 3 classes and a MINIMUM entropy matches better with the input data.") "" (om-make-point 160 435) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "E-SHANNON1111" (quote morph::e-shannon) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "CLASS" nil) (om-load-inputfunmenu1 (quote input-funmenu) "no documentation" "RES" "rel" (list (list "absolute" "abs") (list "relative" "rel"))))) (om-make-point 476 367) nil nil nil nil 1) (om-load-boxcomment "comment311111" (om-make-point 103 30) (quote "defines 5 classes") "" (om-make-point 500 323) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "CLASS-11111" (quote morph::class-1) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "MATRIX" nil) (om-load-inputfun (quote input-funbox) "no documentation" "N" 2))) (om-make-point 480 280) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux11111" (quote t) (quote nil) (om-make-point 506 248) (om-make-point 20 28) 5 "5" nil) (om-load-boxcall (quote genfun) "E-SHANNON111" (quote morph::e-shannon) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "CLASS" nil) (om-load-inputfunmenu1 (quote input-funmenu) "no documentation" "RES" "rel" (list (list "absolute" "abs") (list "relative" "rel"))))) (om-make-point 345 367) nil nil nil nil 1) (om-load-boxcall (quote genfun) "E-SHANNON11" (quote morph::e-shannon) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "CLASS" nil) (om-load-inputfunmenu1 (quote input-funmenu) "no documentation" "RES" "rel" (list (list "absolute" "abs") (list "relative" "rel"))))) (om-make-point 212 370) nil nil nil nil 1) (om-load-boxcall (quote genfun) "E-SHANNON1" (quote morph::e-shannon) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "CLASS" nil) (om-load-inputfunmenu1 (quote input-funmenu) "no documentation" "RES" "rel" (list (list "absolute" "abs") (list "relative" "rel"))))) (om-make-point 61 363) nil nil nil nil 1) (om-load-boxcomment "comment31111" (om-make-point 102 21) (quote "defines 4 classes") "" (om-make-point 366 324) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "CLASS-1111" (quote morph::class-1) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "MATRIX" nil) (om-load-inputfun (quote input-funbox) "no documentation" "N" 2))) (om-make-point 340 280) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux1111" (quote t) (quote nil) (om-make-point 377 249) (om-make-point 20 28) 4 "4" nil) (om-load-boxcomment "comment3111" (om-make-point 102 21) (quote "defines 3 classes") "" (om-make-point 232 325) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "CLASS-111" (quote morph::class-1) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "MATRIX" nil) (om-load-inputfun (quote input-funbox) "no documentation" "N" 2))) (om-make-point 200 280) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux111" (quote t) (quote nil) (om-make-point 244 248) (om-make-point 20 28) 3 "3" nil) (om-load-boxcomment "comment311" (om-make-point 102 21) (quote "defines 2 classes") "" (om-make-point 109 325) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "CLASS-11" (quote morph::class-1) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "MATRIX" nil) (om-load-inputfun (quote input-funbox) "no documentation" "N" 2))) (om-make-point 80 280) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux11" (quote t) (quote nil) (om-make-point 117 246) (om-make-point 20 28) 2 "2" nil) (om-load-boxcall (quote genfun) "L-MATRIX" (quote morph::l-matrix) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "LIST" nil))) (om-make-point 76 185) nil nil nil nil 1) (om-load-boxcomment "comment4" (om-make-point 208 33) (quote "<- generates 3 clouds of 20, 100 and 100 points each in 2 dimensions") "" (om-make-point 167 100) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote patch-box) "3 clouds1" (quote ("elements" "morphologie" "utilities" "3 clouds")) (quote ((om-load-inputfun (quote input-funbox) "n cloud 1" "input" nil) (om-load-inputfun (quote input-funbox) "n cloud 2" "input1" nil) (om-load-inputfun (quote input-funbox) "n cloud 3" "input2" nil))) (om-make-point 44 94) (om-make-point 119 61) nil nil "3 clouds" 1) (om-load-boxcall (quote bastype) "aux2" (quote t) (quote nil) (om-make-point 60 60) (om-make-point 26 28) 20 "20" nil) (om-load-boxcall (quote bastype) "aux3" (quote t) (quote nil) (om-make-point 100 60) (om-make-point 32 28) 100 "100" nil))) (quote ((15 0 0 1 nil 0) (14 0 0 2 nil 0) (13 0 6 0 nil 0) (13 0 7 0 nil 0) (35 0 13 0 nil 0) (12 0 13 1 nil 0) (11 0 13 2 nil 0) (16 0 14 0 nil 0) (16 0 15 0 nil 0) (37 0 16 0 nil 0) (21 0 19 0 nil 0) (35 0 21 0 nil 0) (22 0 21 1 nil 0) (27 0 23 0 nil 0) (30 0 24 0 nil 0) (33 0 25 0 nil 0) (35 0 27 0 nil 0) (28 0 27 1 nil 0) (35 0 30 0 nil 0) (31 0 30 1 nil 0) (35 0 33 0 nil 0) (34 0 33 1 nil 0) (37 0 35 0 nil 0) (38 0 37 0 nil 0) (39 0 37 1 nil 0) (17 0 37 2 nil 0))) nil 6.0011))
