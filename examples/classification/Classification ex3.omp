; OM File Header - Saved 2009/06/15 12:44:33
; (6.0011 :patc (om-make-point 100 162) (om-make-point 50 50) (om-make-point 747 631) "No documentation " 183 0 nil "2009/06/15 12:44:33")
; End File Header
(in-package :om)(load-lib-for (quote ("morphologie")))(setf *om-current-persistent* (om-load-patch1 "Classification ex3" (quote ((om-load-editor-box1 "BPC" (quote bpc) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "X-POINTS" (list 0 10)) (om-load-inputfun (quote input-funbox) "no documentation" "Y-POINTS" (list 0 100)) (om-load-inputfun (quote input-funbox) "no documentation" "DECIMALS" 0))) (om-make-point 349 111) (om-make-point 90 95) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (73 88 29 6 28 2 32 57 2 68 74 71 40 98 91 49 23 45 48 24 76 60 56 57 3 62 9 4 6 95 6 17 78 22 26 41 71 44 60 45 20 78 31 85 97 31 17 5 86 86 63 70 11 70 22 95 78 61 42 24 84 91 70 10 87 56 43 32 14 26 26 80 3 41 85 15 46 87 9 44 73 94 34 61 58 61 52 68 27 63 84 53 11 29 46 5 85 100 5 22 140 113 122 122 112 129 123 122 125 113 123 129 127 125 127 112 119 116 130 128 137 123 131 138 112 111 132 135 118 112 114 127 139 131 127 116 113 132 122 139 138 137 131 119 123 138 114 124 116 114 126 116 128 137 139 111 125 110 126 110 138 110 130 123 121 138 116 117 121 118 126 121 133 125 116 113 139 133 123 139 127 112 138 116 119 126 140 137 139 137 129 123 120 136 111 124 131 137 126 127 196 189 189 187 194 188 185 186 190 193 184 192 182 187 186 199 198 190 186 195)) (quote (47 51 27 28 32 40 66 99 71 36 5 66 59 57 97 64 70 46 31 96 53 85 65 54 47 67 51 78 27 69 93 88 22 50 47 42 78 97 11 7 42 74 32 18 3 48 98 2 97 69 82 79 77 8 19 68 19 90 24 20 30 24 22 34 3 77 40 48 15 99 38 80 63 1 74 6 38 29 69 55 12 3 46 47 47 100 85 34 54 26 13 43 81 39 57 23 88 10 82 83 116 110 118 126 119 133 134 139 123 140 117 136 127 136 119 116 110 125 127 136 124 114 119 134 134 112 134 123 137 134 132 110 117 135 125 128 115 136 130 138 111 124 137 115 125 122 122 122 122 129 118 120 118 130 129 131 126 113 111 138 118 132 116 125 128 116 136 117 123 121 120 133 139 117 131 126 134 113 130 131 111 110 120 135 126 125 134 135 112 122 138 139 129 135 118 118 122 136 139 136 190 195 197 198 200 195 184 188 188 189 183 189 200 193 195 192 180 187 198 189)) (quote bpc) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) nil nil (pairlis (quote (show-stems obj-mode palette-mode winpos winsize mode grillestep notechancolor? cmnpref zoom inport outport deltapict)) (list (quote t) 0 0 2621450 18350450 0 1000 nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 1 0 0 (om-make-point 0 0))) t nil nil nil) (om-load-boxcomment "comment" (om-make-point 330 67) (quote "As one can see, the classification found at each run  is not always the same.$It depends on the initial conditions for the random initialization at the begenning of each run.") "" (om-make-point 135 308) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "META-CLASS1" (quote morph::meta-class1) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "MATRIX" nil) (om-load-inputfun (quote input-funbox) "no documentation" "N" 2) (om-load-inputfun (quote input-funbox) "no documentation" "ITER" 1))) (om-make-point 62 269) nil nil nil nil 1) (om-load-boxcall (quote genfun) "E-TEST" (quote morph::e-test) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "CLUSTERS" nil) (om-load-inputfunmenu1 (quote input-funmenu) "no documentation" "TEST" "min" (list (list "min" "min") (list "max" "max"))))) (om-make-point 0 399) (om-make-point 78 61) nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 95 41) (quote "One can see the 2-dims clouds") "" (om-make-point 442 138) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment2" (om-make-point 31 28) (quote "- 2 -") "" (om-make-point 606 360) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 31 28) (quote "- 1 -") "" (om-make-point 182 383) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment112" (om-make-point 179 114) (quote "<- Using the optional argument in \"nth\" mode,$one can see that 6 to 7 iterations for 10 runs of the algorithm have the same result, with minimum entropy.") "" (om-make-point 531 384) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "E-TEST1" (quote morph::e-test) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "CLUSTERS" nil) (om-load-inputfunmenu1 (quote input-funmenu) "no documentation" "TEST" "min" (list (list "min" "min") (list "max" "max"))) (om-load-inputfunmenu1 (quote input-funmenu) "no documentation" "OUT" "nth" (list (list "clust" "clust") (list "nth" "nth"))))) (om-make-point 371 428) (om-make-point 152 61) nil nil nil 1) (om-load-boxcomment "comment111" (om-make-point 257 150) (quote "<- Two ways to find a \"good\" classification :$$with a minimum entropy, the classification is close to the random input$(the input data from 3 clouds,what we are trying to restitute);$$with a maximum entropy, the 3 classes are not well defined, the classifications tends to reduce the borders between clouds.") "" (om-make-point 87 419) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote lispfun) "SECOND" (quote second) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 216 145) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 153 167) nil nil nil nil 1) (om-load-boxcall (quote genfun) "MAT-TRANS" (quote mat-trans) (quote ((om-load-inputfun (quote input-funbox) "the list" "MATRIX" nil))) (om-make-point 110 99) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux4" (quote t) (quote nil) (om-make-point 134 5) (om-make-point 26 28) 20 "20" nil) (om-load-boxcall (quote bastype) "aux3" (quote t) (quote nil) (om-make-point 100 5) (om-make-point 32 28) 100 "100" nil) (om-load-boxcall (quote bastype) "aux2" (quote t) (quote nil) (om-make-point 67 5) (om-make-point 32 28) 100 "100" nil) (om-load-boxcall (quote patch-box) "3 clouds1" (quote ("elements" "morphologie" "utilities" "3 clouds")) (quote ((om-load-inputfun (quote input-funbox) "n cloud 1" "input" nil) (om-load-inputfun (quote input-funbox) "n cloud 2" "input1" nil) (om-load-inputfun (quote input-funbox) "n cloud 3" "input2" nil))) (om-make-point 55 34) (om-make-point 88 61) nil nil nil 1) (om-load-boxcomment "comment11" (om-make-point 299 28) (quote "<- this function does n  iterations of classification as class-1.") "" (om-make-point 139 281) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment1" (om-make-point 284 28) (quote "<- number of iterations of the \"mouving cloud\" algorithm") "" (om-make-point 145 242) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 178 28) (quote "<- number of classes to be defined") "" (om-make-point 107 216) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 202 46) (quote "<- generates 3 clouds of 100, 100 and 20 points each in 2 dimensions") "" (om-make-point 148 43) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 84 221) (om-make-point 20 28) 3 "3" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 112 245) (om-make-point 26 28) 10 "10" nil) (om-load-boxcall (quote genfun) "L-MATRIX" (quote morph::l-matrix) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "LIST" nil))) (om-make-point 30 171) nil nil nil nil 1))) (quote ((11 0 0 1 ((om-make-point 163 207) (om-make-point 276 188) (om-make-point 304 110) (om-make-point 385 106) (om-make-point 385 111)) 0) (10 0 0 2 ((om-make-point 234 185) (om-make-point 318 180) (om-make-point 353 77) (om-make-point 403 106) (om-make-point 403 111)) 0) (23 0 2 0 nil 0) (21 0 2 1 nil 0) (22 0 2 2 nil 0) (2 0 3 0 nil 0) (2 0 8 0 nil 0) (12 0 10 0 nil 0) (12 0 11 0 nil 0) (16 0 12 0 nil 0) (15 0 16 0 nil 0) (14 0 16 1 nil 0) (13 0 16 2 nil 0) (16 0 23 0 nil 0))) nil 6.0011))
