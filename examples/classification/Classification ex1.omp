; OM File Header - Saved 2009/06/15 12:44:33
; (6.0011 :patc (om-make-point 98 51) (om-make-point 50 50) (om-make-point 1125 600) "No documentation " 183 0 nil "2009/06/15 12:44:33")
; End File Header
(in-package :om)(load-lib-for (quote ("morphologie")))(setf *om-current-persistent* (om-load-patch1 "Classification ex1" (quote ((om-load-editor-box1 "BPC" (quote bpc) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "X-POINTS" (list 0 10)) (om-load-inputfun (quote input-funbox) "no documentation" "Y-POINTS" (list 0 100)) (om-load-inputfun (quote input-funbox) "no documentation" "DECIMALS" 0))) (om-make-point 452 155) (om-make-point 203 82) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (30 71 35 75 27 9 68 91 96 94 88 6 85 97 97 95 82 18 12 39 71 70 16 50 78 89 34 37 43 8 17 15 75 44 62 52 8 18 48 48 59 13 85 92 28 80 77 38 48 88 97 80 73 0 100 84 10 65 63 32 31 85 7 68 38 47 12 59 18 97 47 90 31 8 26 63 84 72 74 25 98 5 91 66 39 20 88 26 47 30 24 76 21 89 94 76 54 77 6 97 115 121 127 128 138 111 129 122 117 131 129 114 133 137 121 132 134 132 114 125 139 136 132 122 128 113 123 128 131 119 118 126 135 138 116 126 122 124 116 138 119 125 131 139 114 136 120 122 110 139 137 135 115 122 120 136 116 127 123 124 129 132 115 120 140 119 129 134 117 115 138 124 112 134 134 124 121 132 117 122 121 136 111 113 139 136 139 131 115 139 112 113 125 114 121 118 122 113 120 127 183 188 189 191 191 197 198 200 181 192 198 197 191 195 196 200 198 190 197 180 196 194 200 197 198 194 194 184 198 192 196 199 195 195 185 200 182 197 189 187 185 194 183 193 189 188 182 193 189 186 188 196 193 189 196 183 187 183 191 192 182 186 185 183 191 182 197 185 182 189 183 182 200 193 181 193 185 180 198 199 183 186 190 199 195 180 183 180 199 185 186 200 200 184 199 196 182 185 194 188)) (quote (86 10 37 75 49 23 68 73 64 50 25 97 23 73 92 28 30 61 14 96 92 69 33 39 96 42 52 96 93 94 52 21 47 5 35 26 51 41 95 23 71 10 76 84 31 36 8 13 93 32 43 83 38 89 22 2 66 100 68 45 52 41 54 93 21 51 88 87 61 13 18 95 48 60 67 21 74 98 21 93 13 42 79 37 56 38 57 96 60 83 67 57 53 41 58 71 66 94 0 8 119 139 125 132 138 112 134 124 128 112 115 136 125 136 119 125 131 119 135 118 110 118 118 114 133 125 130 110 137 110 116 124 133 113 120 131 139 120 123 124 136 123 124 131 115 133 125 125 127 119 140 139 127 125 129 111 115 127 126 133 112 119 122 126 127 132 122 120 117 134 113 130 130 112 124 113 110 130 119 135 115 129 120 140 121 118 121 115 122 112 111 118 139 121 113 126 115 131 125 129 196 182 195 197 194 196 192 200 183 187 182 194 184 193 186 200 186 198 184 181 191 187 188 197 196 199 199 184 190 184 193 195 184 190 194 182 189 183 180 194 189 188 180 184 181 181 181 188 196 187 190 198 199 181 182 184 180 199 188 186 189 185 191 194 196 181 195 182 196 191 186 197 198 194 193 199 181 181 200 181 200 180 182 181 197 196 196 190 191 197 196 199 192 180 192 199 200 189 199 194)) (quote bpc) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) nil nil (pairlis (quote (show-stems obj-mode palette-mode winpos winsize mode grillestep notechancolor? cmnpref zoom inport outport deltapict)) (list (quote t) 0 0 2621450 18350450 0 1000 nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 1 0 0 (om-make-point 0 0))) t nil nil nil) (om-load-boxcomment "comment2" (om-make-point 104 66) (quote "<- Does n iterations of class-1") "" (om-make-point 901 302) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 153 34) (quote "Homogeneous clusters") "" (om-make-point 419 29) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 202 30) (quote "E_SHANNON - EXEMPLE 1 -") "" (om-make-point 410 6) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 190 76) (quote "10 runs give the same entropy value.$But the clouds at the input are homogeneous :$100 points each") "" (om-make-point 801 450) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "E-SHANNON2" (quote morph::e-shannon) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "CLASS" nil) (om-load-inputfunmenu1 (quote input-funmenu) "no documentation" "RES" "rel" (list (list "absolute" "abs") (list "relative" "rel"))))) (om-make-point 841 389) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 117 64) (quote "But the clouds are homogeneous") "" (om-make-point 534 469) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux5" (quote t) (quote nil) (om-make-point 880 260) (om-make-point 26 28) 10 "10" nil) (om-load-boxcall (quote bastype) "aux4" (quote t) (quote nil) (om-make-point 860 260) (om-make-point 20 28) 3 "3" nil) (om-load-boxcall (quote genfun) "META-CLASS1" (quote morph::meta-class1) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "MATRIX" nil) (om-load-inputfun (quote input-funbox) "no documentation" "N" 2) (om-load-inputfun (quote input-funbox) "no documentation" "ITER" 10))) (om-make-point 820 300) nil (list (list (list 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2) (list 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2) (list 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2) (list 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2) (list 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2) (list 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2) (list 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2) (list 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2) (list 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2) (list 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2))) "x" nil 1) (om-load-boxcomment "comment" (om-make-point 143 67) (quote "Each list presents the number of classes found, and the relative entropy computed.") "" (om-make-point 685 141) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 120 55) (quote "Here a loop compute the entropy up to 8 classes.") "" (om-make-point 681 39) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote lispfun) "SECOND" (quote second) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 578 105) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 503 109) nil nil nil nil 1) (om-load-boxcall (quote genfun) "MAT-TRANS" (quote mat-trans) (quote ((om-load-inputfun (quote input-funbox) "the list" "MATRIX" nil))) (om-make-point 225 159) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 104 43) (quote "(alpha output mode in class-1)") "" (om-make-point 669 410) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 140 60) (om-make-point 32 28) 100 "100" nil) (om-load-boxwithed1 (quote box-with-win) "OMLOOP" (quote omloop) (quote nil) (om-make-point 723 92) nil nil nil (list (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 145 45) (om-make-point 23 20) 100 "100" nil) (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 289 312) nil nil nil nil 1) (om-load-boxcall (quote genfun) "E-SHANNON" (quote morph::e-shannon) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "CLASS" nil) (om-load-inputfunmenu1 (quote input-funmenu) "no documentation" "RES" "rel" (list (list "absolute" "abs") (list "relative" "rel"))))) (om-make-point 121 269) nil nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "WHAT?" nil))) (om-make-point 277 352) nil nil nil nil 3) (om-load-boxcall (quote bastype) "aux6" (quote t) (quote nil) (om-make-point 315 53) (om-make-point 25 20) 1 "1" nil) (om-load-boxcall (quote bastype) "aux5" (quote t) (quote nil) (om-make-point 299 53) (om-make-point 17 20) 8 "8" nil) (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 283 53) (om-make-point 11 20) 2 "2" nil) (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 10) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 271 83) nil nil nil nil 1) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 275 141) nil nil nil nil 1) (om-load-boxcall (quote genfun) "CLASS-1" (quote morph::class-1) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "MATRIX" nil) (om-load-inputfun (quote input-funbox) "no documentation" "N" 2))) (om-make-point 119 206) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux3" (quote t) (quote nil) (om-make-point 120 45) (om-make-point 23 20) 100 "100" nil) (om-load-boxcall (quote bastype) "aux2" (quote t) (quote nil) (om-make-point 98 45) (om-make-point 23 20) 100 "100" nil) (om-load-boxcall (quote patch-box) "3 clouds1" (quote ("elements" "morphologie" "utilities" "3 clouds")) (quote ((om-load-inputfun (quote input-funbox) "n cloud 1" "input" nil) (om-load-inputfun (quote input-funbox) "n cloud 2" "input1" nil) (om-load-inputfun (quote input-funbox) "n cloud 3" "input2" nil))) (om-make-point 82 76) (om-make-point 106 61) nil nil "3 clouds" 1) (om-load-boxcall (quote genfun) "L-MATRIX" (quote morph::l-matrix) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "LIST" nil))) (om-make-point 111 138) nil nil nil nil 1) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "patch" "PATCH" nil))) (om-make-point 323 417) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "patch" "PATCH" nil))) (om-make-point 261 417) nil nil nil 0)) (quote ((8 0 1 0 nil 0) (2 0 1 1 nil 0) (9 0 2 0 nil 0) (1 0 3 0 nil 0) (6 0 7 0 nil 0) (5 0 7 1 nil 0) (4 0 7 2 nil 0) (7 0 8 0 nil 0) (13 0 9 0 nil 0) (8 0 9 1 nil 0) (11 0 12 0 nil 0) (10 0 12 1 nil 0) (0 0 12 2 nil 0) (12 0 13 0 nil 0) (3 1 14 0 nil 0) (3 0 15 0 nil 0))) 1 "omloop" nil) (om-load-boxcomment "comment1" (om-make-point 123 95) (quote "in relative mode,$entropy computation works for more than 1 class.$For 1 class, absolute entropy = 0.") "" (om-make-point 82 454) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 129 81) (quote "in relative mode,$this classification with 3 classes$has a MAXIMUM entropy.") "" (om-make-point 332 456) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment3111111" (om-make-point 111 38) (quote "<- works also with a string as input") "" (om-make-point 667 376) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "E-SHANNON1111" (quote morph::e-shannon) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "CLASS" nil) (om-load-inputfunmenu1 (quote input-funmenu) "no documentation" "RES" "rel" (list (list "absolute" "abs") (list "relative" "rel"))))) (om-make-point 599 382) nil nil nil nil 1) (om-load-boxcomment "comment311111" (om-make-point 103 30) (quote "defines 5 classes") "" (om-make-point 623 343) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "CLASS-11111" (quote morph::class-1) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "MATRIX" nil) (om-load-inputfun (quote input-funbox) "no documentation" "N" 2) (om-load-inputfunmenu1 (quote input-funmenu) "no documentation" "ALPHA?" 1 (list (list "alpha" 1) (list "num" 0))))) (om-make-point 600 300) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux11111" (quote t) (quote nil) (om-make-point 620 260) (om-make-point 20 28) 5 "5" nil) (om-load-boxcall (quote genfun) "E-SHANNON111" (quote morph::e-shannon) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "CLASS" nil) (om-load-inputfunmenu1 (quote input-funmenu) "no documentation" "RES" "rel" (list (list "absolute" "abs") (list "relative" "rel"))))) (om-make-point 468 387) nil nil nil nil 1) (om-load-boxcall (quote genfun) "E-SHANNON11" (quote morph::e-shannon) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "CLASS" nil) (om-load-inputfunmenu1 (quote input-funmenu) "no documentation" "RES" "rel" (list (list "absolute" "abs") (list "relative" "rel"))))) (om-make-point 335 390) nil nil nil nil 1) (om-load-boxcall (quote genfun) "E-SHANNON1" (quote morph::e-shannon) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "CLASS" nil) (om-load-inputfunmenu1 (quote input-funmenu) "no documentation" "RES" "rel" (list (list "absolute" "abs") (list "relative" "rel"))))) (om-make-point 209 390) nil nil nil nil 1) (om-load-boxcomment "comment31111" (om-make-point 102 21) (quote "defines 4 classes") "" (om-make-point 489 344) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "CLASS-1111" (quote morph::class-1) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "MATRIX" nil) (om-load-inputfun (quote input-funbox) "no documentation" "N" 2))) (om-make-point 460 300) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux1111" (quote t) (quote nil) (om-make-point 500 260) (om-make-point 20 28) 4 "4" nil) (om-load-boxcomment "comment3111" (om-make-point 102 21) (quote "defines 3 classes") "" (om-make-point 355 345) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "CLASS-111" (quote morph::class-1) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "MATRIX" nil) (om-load-inputfun (quote input-funbox) "no documentation" "N" 2))) (om-make-point 340 300) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux111" (quote t) (quote nil) (om-make-point 380 260) (om-make-point 20 28) 3 "3" nil) (om-load-boxcomment "comment311" (om-make-point 102 21) (quote "defines 2 classes") "" (om-make-point 232 345) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "CLASS-11" (quote morph::class-1) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "MATRIX" nil) (om-load-inputfun (quote input-funbox) "no documentation" "N" 2))) (om-make-point 200 300) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux11" (quote t) (quote nil) (om-make-point 240 260) (om-make-point 20 28) 2 "2" nil) (om-load-boxcomment "comment31" (om-make-point 102 21) (quote "defines 1 classe") "" (om-make-point 112 347) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "E-SHANNON" (quote morph::e-shannon) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "CLASS" nil) (om-load-inputfunmenu1 (quote input-funmenu) "no documentation" "RES" "rel" (list (list "absolute" "abs") (list "relative" "rel"))))) (om-make-point 86 391) nil nil nil nil 1) (om-load-boxcall (quote genfun) "CLASS-1" (quote morph::class-1) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "MATRIX" nil) (om-load-inputfun (quote input-funbox) "no documentation" "N" 2))) (om-make-point 80 301) nil nil nil nil 1) (om-load-boxcall (quote genfun) "L-MATRIX" (quote morph::l-matrix) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "LIST" nil))) (om-make-point 76 184) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 120 260) (om-make-point 20 28) 1 "1" nil) (om-load-boxcomment "comment4" (om-make-point 204 48) (quote "<- generates 3 clouds of 100 points each in 2 dimensions") "" (om-make-point 162 100) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote patch-box) "3 clouds1" (quote ("elements" "morphologie" "utilities" "3 clouds")) (quote ((om-load-inputfun (quote input-funbox) "n cloud 1" "input" nil) (om-load-inputfun (quote input-funbox) "n cloud 2" "input1" nil) (om-load-inputfun (quote input-funbox) "n cloud 3" "input2" nil))) (om-make-point 44 94) (om-make-point 119 61) nil nil "3 clouds" 1) (om-load-boxcall (quote bastype) "aux2" (quote t) (quote nil) (om-make-point 60 60) (om-make-point 32 28) 100 "100" nil) (om-load-boxcall (quote bastype) "aux3" (quote t) (quote nil) (om-make-point 100 60) (om-make-point 32 28) 100 "100" nil))) (quote ((13 0 0 1 nil 0) (12 0 0 2 nil 0) (9 0 5 0 nil 0) (40 0 9 0 nil 0) (8 0 9 1 nil 0) (7 0 9 2 nil 0) (14 0 12 0 ((om-make-point 253 210) (om-make-point 425 210) (om-make-point 425 70) (om-make-point 598 100) (om-make-point 598 105)) 0) (14 0 13 0 ((om-make-point 253 210) (om-make-point 387 210) (om-make-point 387 72) (om-make-point 521 104) (om-make-point 521 109)) 0) (43 0 14 0 nil 0) (23 0 21 0 nil 0) (40 0 23 0 nil 0) (24 0 23 1 nil 0) (29 0 25 0 nil 0) (32 0 26 0 nil 0) (35 0 27 0 nil 0) (40 0 29 0 nil 0) (30 0 29 1 nil 0) (40 0 32 0 nil 0) (33 0 32 1 nil 0) (40 0 35 0 nil 0) (36 0 35 1 nil 0) (39 0 38 0 nil 0) (40 0 39 0 nil 0) (41 0 39 1 nil 0) (43 0 40 0 nil 0) (44 0 43 0 nil 0) (45 0 43 1 nil 0) (16 0 43 2 nil 0))) nil 6.0011))
