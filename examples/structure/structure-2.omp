; OM File Header - Saved 2019/09/26 9:47:17
; (6.15 :patc (om-make-point 127 67) (om-make-point 2 29) (om-make-point 1282 557) "No documentation " 183 0 nil "2019/09/26 9:47:17")
; End File Header
(in-package :om)(load-lib-for (quote ("Morphologie")))(setf *om-current-persistent* (om-load-patch1 "Structure-2" (quote ((let ((box (om-load-boxcomment "comment1 7" (om-make-point 104 43) (quote "(CPU intensive)") "" (om-make-point 997 316) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment1 6" (om-make-point 104 43) (quote "(CPU intensive)") "" (om-make-point 718 328) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment1 5" (om-make-point 104 43) (quote "(CPU intensive)") "" (om-make-point 52 354) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment1 4" (om-make-point 295 49) (quote "Structure-2 permits 5 output modes") "" (om-make-point 497 41) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment1 3" (om-make-point 136 73) (quote "Returns list of lists of amount of completion and the relative form") "" (om-make-point 706 274) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment1 2" (om-make-point 136 73) (quote "Save detailed output to text file") "" (om-make-point 999 276) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 19" (quote t) (quote nil) (om-make-point 1084 157) (om-make-point 26 30) 4 "4" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 18" (quote t) (quote nil) (om-make-point 1115 157) (om-make-point 30 30) nil "nil" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 17" (quote t) (quote nil) (om-make-point 1052 157) (om-make-point 26 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux31 4" (quote t) (quote nil) (om-make-point 1030 157) (om-make-point 20 28) 5 "5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "STRUCTURE-211 4" (quote morph::structure-2) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "SEQ" nil) (om-load-inputfun (quote input-funbox) "no documentation" "N-MAX" 10) (om-load-inputfunmenu1 (quote input-funmenu) "no documentation" "ALPHA?" 1 (list (list "alpha" 1) (list "num" 0))) (om-load-inputfunmenu1 (quote input-funmenu) "no documentation" "RESULT" 0 (list (list "extended" 0) (list "pos" 1) (list "mat" 2) (list "p-score" 3) (list "save" 4))) (om-load-inputfun (quote input-funbox) "no documentation" "LENGTH" nil))) (om-make-point 997 194) (om-make-point 124 61) nil nil "structure-2" 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 16" (quote t) (quote nil) (om-make-point 715 157) (om-make-point 26 30) 3 "3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 15" (quote t) (quote nil) (om-make-point 746 157) (om-make-point 30 30) nil "nil" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 14" (quote t) (quote nil) (om-make-point 683 157) (om-make-point 26 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux31 3" (quote t) (quote nil) (om-make-point 661 157) (om-make-point 20 28) 5 "5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "STRUCTURE-211 3" (quote morph::structure-2) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "SEQ" nil) (om-load-inputfun (quote input-funbox) "no documentation" "N-MAX" 10) (om-load-inputfunmenu1 (quote input-funmenu) "no documentation" "ALPHA?" 1 (list (list "alpha" 1) (list "num" 0))) (om-load-inputfunmenu1 (quote input-funmenu) "no documentation" "RESULT" 0 (list (list "extended" 0) (list "pos" 1) (list "mat" 2) (list "p-score" 3) (list "save" 4))) (om-load-inputfun (quote input-funbox) "no documentation" "LENGTH" nil))) (om-make-point 628 194) (om-make-point 124 61) nil nil "structure-2" 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment11 2" (om-make-point 179 82) (quote "Returns in a list : the list of patterns and, as a matrix, for each pattern, its completion form (crible) in the input sequence, using 0 or 1.") "" (om-make-point 443 275) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 13" (quote t) (quote nil) (om-make-point 577 157) (om-make-point 30 30) nil "nil" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 12" (quote t) (quote nil) (om-make-point 546 157) (om-make-point 26 30) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 11" (quote t) (quote nil) (om-make-point 514 157) (om-make-point 26 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux31 2" (quote t) (quote nil) (om-make-point 492 157) (om-make-point 20 28) 5 "5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "STRUCTURE-211 2" (quote morph::structure-2) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "SEQ" nil) (om-load-inputfun (quote input-funbox) "no documentation" "N-MAX" 10) (om-load-inputfunmenu1 (quote input-funmenu) "no documentation" "ALPHA?" 1 (list (list "alpha" 1) (list "num" 0))) (om-load-inputfunmenu1 (quote input-funmenu) "no documentation" "RESULT" 0 (list (list "extended" 0) (list "pos" 1) (list "mat" 2) (list "p-score" 3) (list "save" 4))) (om-load-inputfun (quote input-funbox) "no documentation" "LENGTH" nil))) (om-make-point 459 194) (om-make-point 124 61) nil nil "structure-2" 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 10" (quote t) (quote nil) (om-make-point 153 160) (om-make-point 30 30) nil "nil" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 9" (quote t) (quote nil) (om-make-point 125 160) (om-make-point 26 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 98 160) (om-make-point 26 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 938 157) (om-make-point 30 30) nil "nil" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 907 157) (om-make-point 26 30) 3 "3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 875 157) (om-make-point 26 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 391 158) (om-make-point 30 30) nil "nil" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 359 158) (om-make-point 26 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 328 158) (om-make-point 26 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 215 42) (quote "This converts strings into lists of symbols") "" (om-make-point 907 394) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 232 64) (quote "Then each structure found can be processed as a sequence.") "" (om-make-point 907 431) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "SECOND" (quote second) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 856 336) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAT-TRANS" (quote mat-trans) (quote ((om-load-inputfun (quote input-funbox) "the list" "MATRIX" nil))) (om-make-point 853 273) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "STR->SYMB" (quote morph::str->symb) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "STRINGS" nil))) (om-make-point 848 385) nil nil nil "str->symb" 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "STRUCTURE-211" (quote morph::structure-2) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "SEQ" nil) (om-load-inputfun (quote input-funbox) "no documentation" "N-MAX" 10) (om-load-inputfunmenu1 (quote input-funmenu) "no documentation" "ALPHA?" 1 (list (list "alpha" 1) (list "num" 0))) (om-load-inputfunmenu1 (quote input-funmenu) "no documentation" "RESULT" 0 (list (list "extended" 0) (list "pos" 1) (list "mat" 2) (list "p-score" 3) (list "save" 4))) (om-load-inputfun (quote input-funbox) "no documentation" "LENGTH" nil))) (om-make-point 820 194) (om-make-point 124 61) nil nil "structure-2" 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux31" (quote t) (quote nil) (om-make-point 853 157) (om-make-point 20 28) 5 "5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux3" (quote t) (quote nil) (om-make-point 302 158) (om-make-point 20 28) 5 "5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment1" (om-make-point 136 73) (quote "Returns the position where each pattern found starts in the sequence") "" (om-make-point 266 274) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "STRUCTURE-21" (quote morph::structure-2) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "SEQ" nil) (om-load-inputfun (quote input-funbox) "no documentation" "N-MAX" 10) (om-load-inputfunmenu1 (quote input-funmenu) "no documentation" "ALPHA?" 1 (list (list "alpha" 1) (list "num" 0))) (om-load-inputfunmenu1 (quote input-funmenu) "no documentation" "RESULT" 1 (list (list "extended" 0) (list "pos" 1) (list "mat" 2) (list "p-score" 3) (list "save" 4))) (om-load-inputfun (quote input-funbox) "no documentation" "LENGTH" nil))) (om-make-point 269 194) (om-make-point 124 61) nil nil "structure-2" 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 178 70) (quote "Prints out to the Listener detailed of the structures founded with up to 5 elements and more than 75% completion of the input sequence.") "" (om-make-point 51 275) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux2" (quote t) (quote nil) (om-make-point 185 160) (om-make-point 26 28) 75 "75" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 76 160) (om-make-point 20 28) 5 "5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "STRUCTURE-2" (quote morph::structure-2) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "SEQ" nil) (om-load-inputfun (quote input-funbox) "no documentation" "N-MAX" 10) (om-load-inputfunmenu1 (quote input-funmenu) "no documentation" "ALPHA?" 1 (list (list "alpha" 1) (list "num" 0))) (om-load-inputfunmenu1 (quote input-funmenu) "no documentation" "RESULT" 0 (list (list "extended" 0) (list "pos" 1) (list "mat" 2) (list "p-score" 3) (list "save" 4))) (om-load-inputfun (quote input-funbox) "no documentation" "LENGTH" nil) (om-load-inputfun (quote input-funbox) "no documentation" "SEUIL" 10))) (om-make-point 56 194) (om-make-point 150 67) nil nil "structure-2" 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 104 46) (om-make-point 215 28) (list (quote a) (quote b) (quote c) (quote a) (quote b) (quote d) (quote a) (quote b) (quote c) (quote j) (quote h) (quote i) (quote j) (quote h) (quote i) (quote a) (quote b) (quote d) (quote a) (quote b) (quote c)) "(a b c a b d a b c j h i j h i a b d a b c)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((45 0 10 0 nil 0) (9 0 10 1 nil 0) (8 0 10 2 nil 0) (6 0 10 3 nil 0) (7 0 10 4 nil 0) (45 0 15 0 nil 0) (14 0 15 1 nil 0) (13 0 15 2 nil 0) (11 0 15 3 nil 0) (12 0 15 4 nil 0) (45 0 21 0 nil 0) (20 0 21 1 nil 0) (19 0 21 2 nil 0) (18 0 21 3 nil 0) (17 0 21 4 nil 0) (34 0 33 0 nil 0) (36 0 34 0 nil 0) (33 0 35 0 nil 0) (45 0 36 0 nil 0) (37 0 36 1 nil 0) (27 0 36 2 nil 0) (26 0 36 3 nil 0) (25 0 36 4 nil 0) (45 0 40 0 nil 0) (38 0 40 1 nil 0) (30 0 40 2 nil 0) (29 0 40 3 nil 0) (28 0 40 4 nil 0) (45 0 44 0 nil 0) (43 0 44 1 nil 0) (24 0 44 2 nil 0) (23 0 44 3 nil 0) (22 0 44 4 nil 0) (42 0 44 5 nil 0))) nil 6.15))