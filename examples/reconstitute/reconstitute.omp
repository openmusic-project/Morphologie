; OM File Header - Saved 2009/06/15 12:44:33
; (6.0011 :patc (om-make-point 185 53) (om-make-point 50 50) (om-make-point 909 637) "No documentation " 183 0 nil "2009/06/15 12:44:33")
; End File Header
(in-package :om)(load-lib-for (quote ("morphologie")))(setf *om-current-persistent* (om-load-patch1 "reconstitute" (quote ((om-load-boxcomment "comment111" (om-make-point 153 67) (quote "it reconstitutes the original profile using only the primitive, depth, value and position analysis") "" (om-make-point 702 330) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment11" (om-make-point 102 82) (quote "it reconstitutes the original profile using only the primitive, depth and value analysis") "" (om-make-point 507 334) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment1" (om-make-point 103 84) (quote "it reconstitutes the original profile using only the primitive and depth analysis") "" (om-make-point 320 356) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "OM-ROUND" (quote om-round) (quote ((om-load-inputfun (quote input-funbox) "number or tree" "SELF" 1))) (om-make-point 705 404) nil nil nil nil 1) (om-load-boxcall (quote genfun) "MIN-FLEX-MAX" (quote morph::min-flex-max) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "LIST" (list 6000 4000 5600 4700 4100 5900 6400 7800 7400 6300 5500 5200 4900 6400 6800 8300 8000 6400 6100 6100 6100 6100 6100 6100 4600 4700 4500 5300 5400 5600 5600 5600 5600 5500 5500 6900 6900 7300 6100 5900)) (om-load-inputfunmenu1 (quote input-funmenu) "no documentation" "WHICH" 4 (list (list "prim" 1) (list "prof" 2) (list "vals" 3) (list "every" 4))))) (om-make-point 571 247) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM-ROUND" (quote om-round) (quote ((om-load-inputfun (quote input-funbox) "number or tree" "SELF" 1))) (om-make-point 466 390) nil nil nil nil 1) (om-load-boxcall (quote genfun) "MIN-FLEX-MAX" (quote morph::min-flex-max) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "LIST" (list 6000 4000 5600 4700 4100 5900 6400 7800 7400 6300 5500 5200 4900 6400 6800 8300 8000 6400 6100 6100 6100 6100 6100 6100 4600 4700 4500 5300 5400 5600 5600 5600 5600 5500 5500 6900 6900 7300 6100 5900)) (om-load-inputfunmenu1 (quote input-funmenu) "no documentation" "WHICH" 3 (list (list "prim" 1) (list "prof" 2) (list "vals" 3) (list "every" 4))))) (om-make-point 411 247) nil nil nil nil 1) (om-load-boxcall (quote genfun) "MIN-FLEX-MAX" (quote morph::min-flex-max) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "LIST" (list 6000 4000 5600 4700 4100 5900 6400 7800 7400 6300 5500 5200 4900 6400 6800 8300 8000 6400 6100 6100 6100 6100 6100 6100 4600 4700 4500 5300 5400 5600 5600 5600 5600 5500 5500 6900 6900 7300 6100 5900)) (om-load-inputfunmenu1 (quote input-funmenu) "no documentation" "WHICH" 2 (list (list "prim" 1) (list "prof" 2) (list "vals" 3) (list "every" 4))))) (om-make-point 271 247) nil nil nil nil 1) (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "X-POINTS" "X-POINTS" (list 0 10)) (om-load-inputfun (quote input-funbox) "Y-POINTS" "Y-POINTS" (list 0 100)))) (om-make-point 621 473) (om-make-point 106 96) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 10 20 30 40 50 60 70 80 90 100 110 120 130 140 150 160 170 180 190 200 210 220 230 240 250 260 270 280 290 300 310 320 330 340)) (quote (6000 4000 5600 4850 4100 5333 6566 7800 7220 6640 6060 5480 4900 6033 7166 8300 6100 6100 6100 6100 6100 6100 4600 4700 4500 5600 5600 5600 5600 5500 5500 6900 6900 7300 6000)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) nil nil (pairlis (quote (show-stems obj-mode palette-mode winpos winsize mode grillestep notechancolor? cmnpref zoom inport outport deltapict)) (list (quote t) 0 0 2621450 18350450 0 1000 nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 1 0 0 (om-make-point 0 0))) t nil nil nil) (om-load-boxcall (quote genfun) "RECONSTITUTE" (quote morph::reconstitute) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "LIST" nil) (om-load-inputfunmenu1 (quote input-funmenu) "no documentation" "WHICH" 4 (list (list "prim" 1) (list "prof" 2) (list "vals" 3) (list "every" 4))) (om-load-inputfun (quote input-funbox) "no documentation" "START" 0))) (om-make-point 617 342) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 658 303) (om-make-point 38 28) 6000 "6000" nil) (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 498 275) (om-make-point 38 28) 6000 "6000" nil) (om-load-boxcall (quote genfun) "RECONSTITUTE" (quote morph::reconstitute) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "LIST" nil) (om-load-inputfunmenu1 (quote input-funmenu) "no documentation" "WHICH" 3 (list (list "prim" 1) (list "prof" 2) (list "vals" 3) (list "every" 4))) (om-load-inputfun (quote input-funbox) "no documentation" "START" 0))) (om-make-point 428 315) nil nil nil nil 1) (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "X-POINTS" "X-POINTS" (list 0 10)) (om-load-inputfun (quote input-funbox) "Y-POINTS" "Y-POINTS" (list 0 100)))) (om-make-point 439 458) (om-make-point 106 96) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 10 20 30 40 50 60 70 80 90 100 110 120 130 140 150 160 170 180 190 200 210 220 230 240 250 260 270 280 290 300 310 320 330 340 350 360 370 380 390 400 410 420 430 440 450 460 470 480 490 500 510 520 530 540 550 560 570 580 590 600 610)) (quote (6000 4000 6000 5600 6000 5050 4100 5050 6000 6600 7200 7800 7200 6600 6000 5633 5267 4900 5267 5633 6000 6460 6920 7380 7840 8300 7840 7380 6920 6460 6100 6100 6100 6100 6100 6100 6000 5300 4600 5300 6000 5350 4700 5350 6000 5625 5250 4875 4500 4875 5250 5625 5600 5600 5600 5600 5500 5500 6900 6900 6000 7300)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) nil nil (pairlis (quote (show-stems obj-mode palette-mode winpos winsize mode grillestep notechancolor? cmnpref zoom inport outport deltapict)) (list (quote t) 0 0 2621450 18350450 0 1000 nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 1 0 0 (om-make-point 0 0))) t nil nil nil) (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "X-POINTS" "X-POINTS" (list 0 10)) (om-load-inputfun (quote input-funbox) "Y-POINTS" "Y-POINTS" (list 0 100)))) (om-make-point 253 457) (om-make-point 106 96) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 10 20 30 40 50 60 70 80 90 100 110 120 130 140 150 160 170 180 190 200 210 220 230 240 250 260 270 280 290 300 310 320 330 340 350 360 370 380 390 400 410 420 430 440 450 460 470 480 490 500 510 520 530 540 550 560 570 580 590 600 610 620)) (quote (0 -1 0 1 0 -1 -2 -1 0 1 2 3 2 1 0 -1 -2 -3 -2 -1 0 1 2 3 4 5 4 3 2 1 0 0 0 0 0 0 0 -1 -2 -1 0 1 2 1 0 -1 -2 -3 -4 -3 -2 -1 0 0 0 0 0 0 0 0 0 1 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) nil nil (pairlis (quote (show-stems obj-mode palette-mode winpos winsize mode grillestep notechancolor? cmnpref zoom inport outport deltapict)) (list (quote t) 0 0 2621450 18350450 0 1000 nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 1 0 0 (om-make-point 0 0))) t nil nil nil) (om-load-boxcall (quote genfun) "RECONSTITUTE" (quote morph::reconstitute) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "LIST" nil) (om-load-inputfunmenu1 (quote input-funmenu) "no documentation" "WHICH" 2 (list (list "prim" 1) (list "prof" 2) (list "vals" 3) (list "every" 4))) (om-load-inputfun (quote input-funbox) "no documentation" "START" 0))) (om-make-point 252 368) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 330 313) (om-make-point 20 28) 0 "0" nil) (om-load-boxcall (quote genfun) "MIN-FLEX-MAX" (quote morph::min-flex-max) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "LIST" (list 6000 4000 5600 4700 4100 5900 6400 7800 7400 6300 5500 5200 4900 6400 6800 8300 8000 6400 6100 6100 6100 6100 6100 6100 4600 4700 4500 5300 5400 5600 5600 5600 5600 5500 5500 6900 6900 7300 6100 5900)) (om-load-inputfunmenu1 (quote input-funmenu) "no documentation" "WHICH" 1 (list (list "prim" 1) (list "prof" 2) (list "vals" 3) (list "every" 4))))) (om-make-point 51 247) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 114 319) (om-make-point 20 28) 0 "0" nil) (om-load-boxcall (quote genfun) "RECONSTITUTE" (quote morph::reconstitute) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "LIST" nil) (om-load-inputfunmenu1 (quote input-funmenu) "no documentation" "WHICH" 1 (list (list "prim" 1) (list "prof" 2) (list "vals" 3) (list "every" 4))) (om-load-inputfun (quote input-funbox) "no documentation" "START" 0))) (om-make-point 60 362) nil nil nil "reconstitute" 1) (om-load-boxcomment "comment" (om-make-point 114 74) (quote "it reconstitutes the original profile using only the primitive analysis") "" (om-make-point 138 353) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "X-POINTS" "X-POINTS" (list 0 10)) (om-load-inputfun (quote input-funbox) "Y-POINTS" "Y-POINTS" (list 0 100)))) (om-make-point 31 465) (om-make-point 106 96) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 10 20 30 40 50 60 70 80 90 100 110 120 130 140 150 160 170 180 190 200 210 220 230 240 250 260 270 280)) (quote (0 -1 0 1 0 -1 0 1 0 -1 0 1 0 0 0 -1 0 1 0 -1 0 0 0 0 0 0 0 1 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) nil nil (pairlis (quote (show-stems obj-mode palette-mode winpos winsize mode grillestep notechancolor? cmnpref zoom inport outport deltapict)) (list (quote t) 0 0 2621450 18350450 0 1000 nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 1 0 0 (om-make-point 0 0))) t nil nil nil) (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "X-POINTS" "X-POINTS" (list 0 10)) (om-load-inputfun (quote input-funbox) "Y-POINTS" "Y-POINTS" (list 0 100)))) (om-make-point 277 116) (om-make-point 106 96) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 10 20 30 40 50 60 70 80 90 100 110 120 130 140 150 160 170 180 190 200 210 220 230 240 250 260 270 280 290 300 310 320 330 340 350 360 370 380 390)) (quote (6000 4000 5600 4700 4100 5900 6400 7800 7400 6300 5500 5200 4900 6400 6800 8300 8000 6400 6100 6100 6100 6100 6100 6100 4600 4700 4500 5300 5400 5600 5600 5600 5600 5500 5500 6900 6900 7300 6100 5900)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) nil nil (pairlis (quote (show-stems obj-mode palette-mode winpos winsize mode grillestep notechancolor? cmnpref zoom inport outport deltapict)) (list (quote t) 0 0 2621450 18350450 0 1000 nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 1 0 0 (om-make-point 0 0))) t nil nil nil) (om-load-boxcomment "comment" (om-make-point 118 66) (quote "it makes the analysis of the directions of the intervals of the given profile$") "" (om-make-point 156 234) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 66 25) (quote "given profile") "" (om-make-point 153 117) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 112 7) (om-make-point 341 77) (list 6000 4000 5600 4700 4100 5900 6400 7800 7400 6300 5500 5200 4900 6400 6800 8300 8000 6400 6100 6100 6100 6100 6100 6100 4600 4700 4500 5300 5400 5600 5600 5600 5600 5500 5500 6900 6900 7300 6100 5900) "(6000 4000 5600 4700 4100 5900 6400 7800 7400 6300 5500 5200 4900 6400 6800 8300 8000 6400 6100 6100 6100 6100 6100 6100 4600 4700 4500 5300 5400 5600 5600 5600 5600 5500 5500 6900 6900 7300 6100 5900)" nil) (om-load-editor-box1 "CHORD" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "LMIDIC" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "LVEL" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "LOFFSET" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "LDUR" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "LCHAN" "LCHAN" (list 1)))) (om-make-point 66 105) (om-make-point 84 102) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000 4000 5600 4700 4100 5900 6400 7800 7400 6300 5500 5200 4900 6400 6800 8300 8000 6400 6100 6100 6100 6100 6100 6100 4600 4700 4500 5300 5400 5600 5600 5600 5600 5500 5500 6900 6900 7300 6100 5900)) :ldur (quote (1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000)) :lvel (quote (100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100)) :loffset (quote (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))) thechord) nil nil (pairlis (quote (player show-stems obj-mode palette-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx microplay scale)) (list (quote :midishare) (quote t) 0 0 2621450 18350450 0 1000 nil 1 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2 nil nil)) t nil nil nil))) (quote ((9 0 3 0 nil 0) (26 1 4 0 nil 0) (12 0 5 0 nil 0) (26 1 6 0 nil 0) (26 1 7 0 nil 0) (3 0 8 2 nil 0) (4 0 9 0 nil 0) (10 0 9 2 nil 0) (6 0 12 0 nil 0) (11 0 12 2 nil 0) (5 0 13 2 nil 0) (15 0 14 2 nil 0) (7 0 15 0 nil 0) (16 0 15 2 nil 0) (26 1 17 0 nil 0) (17 0 19 0 nil 0) (18 0 19 2 nil 0) (19 0 21 2 nil 0) (26 1 22 2 nil 0) (25 0 26 1 nil 0))) nil 6.0011))
