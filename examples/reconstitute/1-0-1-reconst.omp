; OM File Header - Saved 2009/06/15 12:44:33
; (6.0011 :patc (om-make-point 95 53) (om-make-point 50 50) (om-make-point 602 487) "No documentation " 183 0 nil "2009/06/15 12:44:33")
; End File Header
(in-package :om)(load-lib-for (quote ("morphologie")))(setf *om-current-persistent* (om-load-patch1 "1-0-1-reconst" (quote ((om-load-boxcomment "comment" (om-make-point 114 80) (quote "it reconstitutes the original profile using only the direct-analysis") "" (om-make-point 362 336) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "X-POINTS" "X-POINTS" (list 0 10)) (om-load-inputfun (quote input-funbox) "Y-POINTS" "Y-POINTS" (list 0 100)))) (om-make-point 246 329) (om-make-point 106 96) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 10 20 30 40 50 60 70 80 90 100 110 120 130 140 150 160 170 180 190 200 210 220 230 240 250 260 270 280 290 300 310 320 330 340 350 360 370 380 390)) (quote (0 -1 0 -1 -2 -1 0 1 0 -1 -2 -3 -4 -3 -2 -1 -2 -3 -4 -4 -4 -4 -4 -4 -5 -4 -5 -4 -3 -2 -2 -2 -2 -3 -3 -2 -2 -1 -2 -3)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) nil nil (pairlis (quote (show-stems obj-mode palette-mode winpos winsize mode grillestep notechancolor? cmnpref zoom inport outport deltapict)) (list (quote t) 0 0 2621450 18350450 0 1000 nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 1 0 0 (om-make-point 0 0))) t nil nil nil) (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "X-POINTS" "X-POINTS" (list 0 10)) (om-load-inputfun (quote input-funbox) "Y-POINTS" "Y-POINTS" (list 0 100)))) (om-make-point 309 158) (om-make-point 106 96) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 10 20 30 40 50 60 70 80 90 100 110 120 130 140 150 160 170 180 190 200 210 220 230 240 250 260 270 280 290 300 310 320 330 340 350 360 370 380 390)) (quote (6000 4000 5600 4700 4100 5900 6400 7800 7400 6300 5500 5200 4900 6400 6800 8300 8000 6400 6100 6100 6100 6100 6100 6100 4600 4700 4500 5300 5400 5600 5600 5600 5600 5500 5500 6900 6900 7300 6100 5900)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) nil nil (pairlis (quote (show-stems obj-mode palette-mode winpos winsize mode grillestep notechancolor? cmnpref zoom inport outport deltapict)) (list (quote t) 0 0 2621450 18350450 0 1000 nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 1 0 0 (om-make-point 0 0))) t nil nil nil) (om-load-boxcall (quote genfun) "1-0-1-RECONST" (quote morph::1-0-1-reconst) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "LIST" nil))) (om-make-point 96 317) nil nil nil "1-0-1-reconst" 1) (om-load-boxcall (quote genfun) "DIRECT-ANALYSIS" (quote morph::direct-analysis) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "LIST" (list 6000 4000 5600 4700 4100 5900 6400 7800 7400 6300 5500 5200 4900 6400 6800 8300 8000 6400 6100 6100 6100 6100 6100 6100 4600 4700 4500 5300 5400 5600 5600 5600 5600 5500 5500 6900 6900 7300 6100 5900)))) (om-make-point 64 230) nil nil nil "direct-analysis" 1) (om-load-boxcomment "comment" (om-make-point 118 66) (quote "it makes the analysis of the directions of the intervals of the given profile$") "" (om-make-point 157 227) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 66 25) (quote "given profile") "" (om-make-point 204 119) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 99 20) (om-make-point 343 72) (list 6000 4000 5600 4700 4100 5900 6400 7800 7400 6300 5500 5200 4900 6400 6800 8300 8000 6400 6100 6100 6100 6100 6100 6100 4600 4700 4500 5300 5400 5600 5600 5600 5600 5500 5500 6900 6900 7300 6100 5900) "(6000 4000 5600 4700 4100 5900 6400 7800 7400 6300 5500 5200 4900 6400 6800 8300 8000 6400 6100 6100 6100 6100 6100 6100 4600 4700 4500 5300 5400 5600 5600 5600 5600 5500 5500 6900 6900 7300 6100 5900)" nil) (om-load-editor-box1 "CHORD" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "LMIDIC" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "LVEL" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "LOFFSET" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "LDUR" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "LCHAN" "LCHAN" (list 1)))) (om-make-point 97 109) (om-make-point 105 105) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000 4000 5600 4700 4100 5900 6400 7800 7400 6300 5500 5200 4900 6400 6800 8300 8000 6400 6100 6100 6100 6100 6100 6100 4600 4700 4500 5300 5400 5600 5600 5600 5600 5500 5500 6900 6900 7300 6100 5900)) :ldur (quote (1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000)) :lvel (quote (100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100)) :loffset (quote (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))) thechord) nil nil (pairlis (quote (player show-stems obj-mode palette-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx microplay scale)) (list (quote :midishare) (quote t) 0 0 2621450 18350450 0 1000 nil 1 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2 nil nil)) t nil nil nil))) (quote ((3 0 1 2 nil 0) (8 1 2 2 nil 0) (4 0 3 0 nil 0) (8 1 4 0 nil 0) (7 0 8 1 nil 0))) nil 6.0011))
