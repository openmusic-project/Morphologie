; OM File Header - Saved 2009/06/15 12:44:33
; (6.04 :patc (om-make-point 97 33) (om-make-point 50 50) (om-make-point 903 505) "No documentation " 183 0 nil "2009/06/15 12:44:33")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "5 clouds" (quote ((om-load-boxout "output" 0 (om-make-point 308 401) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil) (om-load-boxin "input4" 4 (om-make-point 740 60) "no documentation" nil nil nil) (om-load-boxin "input3" 3 (om-make-point 620 60) "no documentation" nil nil nil) (om-load-boxcall (quote genfun) "OM-RANDOM12" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 5))) (om-make-point 546 75) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux212" (quote t) (quote nil) (om-make-point 542 46) (om-make-point 32 28) 200 "200" nil) (om-load-boxcall (quote bastype) "aux312" (quote t) (quote nil) (om-make-point 584 48) (om-make-point 32 28) 230 "230" nil) (om-load-boxcall (quote genfun) "OM-RANDOM111" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 5))) (om-make-point 660 75) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux2111" (quote t) (quote nil) (om-make-point 662 35) (om-make-point 32 28) 250 "250" nil) (om-load-boxcall (quote bastype) "aux3111" (quote t) (quote nil) (om-make-point 700 44) (om-make-point 32 28) 300 "300" nil) (om-load-boxcall (quote genfun) "REPEAT-N112" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "patch" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "NUM" 100))) (om-make-point 600 160) nil nil nil nil 1) (om-load-boxcall (quote genfun) "REPEAT-N22" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "patch" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "NUM" 100))) (om-make-point 540 160) nil nil nil nil 1) (om-load-boxcall (quote genfun) "REPEAT-N1111" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "patch" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "NUM" 100))) (om-make-point 740 160) nil nil nil nil 1) (om-load-boxcall (quote genfun) "REPEAT-N211" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "patch" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "NUM" 100))) (om-make-point 680 140) nil nil nil nil 1) (om-load-boxin "input2" 2 (om-make-point 480 40) "no documentation" nil nil nil) (om-load-boxin "input1" 1 (om-make-point 340 40) "no documentation" nil nil nil) (om-load-boxin "input" 0 (om-make-point 200 40) "no documentation" nil nil nil) (om-load-boxcall (quote genfun) "MAT-TRANS" (quote mat-trans) (quote ((om-load-inputfun (quote input-funbox) "the list" "MATRIX" nil))) (om-make-point 304 349) nil nil nil nil 1) (om-load-boxcall (quote genfun) "REPEAT-N1" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "patch" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "NUM" 100))) (om-make-point 200 160) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 5))) (om-make-point 119 83) nil nil nil nil 1) (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "patch" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "NUM" 100))) (om-make-point 120 160) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux2" (quote t) (quote nil) (om-make-point 125 54) (om-make-point 20 28) 0 "0" nil) (om-load-boxcall (quote bastype) "aux3" (quote t) (quote nil) (om-make-point 152 56) (om-make-point 32 28) 100 "100" nil) (om-load-boxcall (quote genfun) "OM-RANDOM1" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 5))) (om-make-point 271 84) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux21" (quote t) (quote nil) (om-make-point 250 51) (om-make-point 32 28) 110 "110" nil) (om-load-boxcall (quote bastype) "aux31" (quote t) (quote nil) (om-make-point 298 52) (om-make-point 32 28) 140 "140" nil) (om-load-boxcall (quote genfun) "OM-RANDOM11" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 5))) (om-make-point 385 84) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux211" (quote t) (quote nil) (om-make-point 387 53) (om-make-point 32 28) 180 "180" nil) (om-load-boxcall (quote bastype) "aux311" (quote t) (quote nil) (om-make-point 424 52) (om-make-point 32 28) 200 "200" nil) (om-load-boxcall (quote genfun) "REPEAT-N11" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "patch" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "NUM" 100))) (om-make-point 320 160) nil nil nil nil 1) (om-load-boxcall (quote genfun) "REPEAT-N2" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "patch" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "NUM" 100))) (om-make-point 260 160) nil nil nil nil 1) (om-load-boxcall (quote genfun) "REPEAT-N111" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "patch" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "NUM" 100))) (om-make-point 460 160) nil nil nil nil 1) (om-load-boxcall (quote genfun) "REPEAT-N21" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "patch" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "NUM" 100))) (om-make-point 400 160) nil nil nil nil 1) (om-load-boxcall (quote genfun) "X-APPEND" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first list" "L1?" nil) (om-load-inputfun (quote input-funbox) "second list" "L2?" nil) (om-load-inputfun (quote input-funbox) "add list" "LST?" nil) (om-load-inputfun (quote input-funbox) "add list" "LST?" nil) (om-load-inputfun (quote input-funbox) "add list" "LST?" nil))) (om-make-point 260 260) nil nil nil nil 1) (om-load-boxcall (quote genfun) "X-APPEND1" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first list" "L1?" nil) (om-load-inputfun (quote input-funbox) "second list" "L2?" nil) (om-load-inputfun (quote input-funbox) "add list" "LST?" nil) (om-load-inputfun (quote input-funbox) "add list" "LST?" nil) (om-load-inputfun (quote input-funbox) "add list" "LST?" nil))) (om-make-point 360 260) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 321 310) nil nil nil nil 1))) (quote ((16 0 0 0 nil 0) (4 0 3 0 nil 0) (5 0 3 1 nil 0) (7 0 6 0 nil 0) (8 0 6 1 nil 0) (3 0 9 0 nil 0) (2 0 9 1 nil 0) (3 0 10 0 nil 0) (2 0 10 1 nil 0) (6 0 11 0 nil 0) (1 0 11 1 nil 0) (6 0 12 0 nil 0) (1 0 12 1 nil 0) (34 0 16 0 nil 0) (18 0 17 0 nil 0) (15 0 17 1 nil 0) (20 0 18 0 nil 0) (21 0 18 1 nil 0) (18 0 19 0 nil 0) (15 0 19 1 nil 0) (23 0 22 0 nil 0) (24 0 22 1 nil 0) (26 0 25 0 nil 0) (27 0 25 1 nil 0) (22 0 28 0 nil 0) (14 0 28 1 nil 0) (22 0 29 0 nil 0) (14 0 29 1 nil 0) (25 0 30 0 nil 0) (13 0 30 1 nil 0) (25 0 31 0 nil 0) (13 0 31 1 nil 0) (19 0 32 0 nil 0) (29 0 32 1 nil 0) (31 0 32 2 nil 0) (10 0 32 3 nil 0) (12 0 32 4 nil 0) (17 0 33 0 nil 0) (28 0 33 1 nil 0) (30 0 33 2 nil 0) (9 0 33 3 nil 0) (11 0 33 4 nil 0) (32 0 34 0 nil 0) (33 0 34 1 nil 0))) nil 6.04))
